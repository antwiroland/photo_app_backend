name: Deploy Backend

on:
  push:
    branches:
      - main

permissions:
  id-token: write   # Required for OIDC
  contents: read    

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # -----------------------------
      # Step 1: Configure AWS credentials (OIDC)
      # -----------------------------
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GITHUB_OIDC_ROLE }}  # Or fetch from env if stored
          aws-region: us-east-1
          role-session-name: backend-deploy-session

      # -----------------------------
      # Step 2: Fetch SSM parameters AFTER assuming role
      # -----------------------------
      - name: Fetch backend parameters from SSM
        id: fetch-params
        run: |
          ECR_URI=$(aws ssm get-parameter --name "/photo-lab/backend/ECRRepositoryUri" --query "Parameter.Value" --output text)
          ECS_CLUSTER=$(aws ssm get-parameter --name "/photo-lab/backend/ECSClusterName" --query "Parameter.Value" --output text)
          ECS_SERVICE=$(aws ssm get-parameter --name "/photo-lab/backend/ECSServiceName" --query "Parameter.Value" --output text)
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
          echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
          echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV

      # -----------------------------
      # Step 3: Log in to ECR
      # -----------------------------
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 \
            | docker login --username AWS --password-stdin ${ECR_URI%/*}

      # -----------------------------
      # Step 4: Build, tag, and push Docker image
      # -----------------------------
      - name: Build, tag, and push Docker image
        run: |
          IMAGE_TAG=latest
          docker build -t backend:$IMAGE_TAG .
          docker tag backend:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG

      # -----------------------------
      # Step 5: Update ECS service
      # -----------------------------
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment
